{"version":3,"sources":["service/async-storage.service.js","service/weatherForcast.service.js","store/actions/forcastActions.js","cmps/Search/Search.jsx","cmps/AppHeader/AppHeader.jsx","cmps/FavoritePreview/FavoritePreview.jsx","service/favorites.service.js","store/actions/favoritesActions.js","pages/Favorites/Favorites.jsx","assets/appColors.js","cmps/DayPreview/DayPreview.jsx","pages/Forcast/Forcast.jsx","App.js","reportWebVitals.js","store/reducers/forcastReducer.js","store/reducers/favoritesReducer.js","store/index.js","index.js"],"names":["storageService","query","get","entityType","entityId","then","entities","find","entity","_id","post","newEntity","_makeId","push","_save","postMany","newEntities","map","put","updatedEntity","idx","findIndex","splice","remove","JSON","parse","localStorage","getItem","Promise","resolve","setItem","stringify","length","text","possible","i","charAt","Math","floor","random","API_KEY","weatherForcatsService","getCitiesAutoComplete","getForcast","getCurrentForcast","getEmptyCity","cityName","locId","getCurrentForcasts","getCityByGeoloc","a","city","storage","console","log","axios","cities","data","loc","forcast","DailyForecasts","lat","lng","label","AdministrativeArea","LocalizedName","id","Key","res","c","currForcast","citiesPromise","all","loadForcast","dispatch","details","type","Search","isDarkMode","useDispatch","history","useHistory","useState","citiesNames","setCitiesNames","isError","setIsError","searchCities","searchTerm","checkLetters","citiesNamesCheck","citiesApi","forEach","obj","includes","value","test","className","style","maxHeight","maxWidth","Autocomplete","inputMode","disablePortal","options","color","sx","width","bgcolor","onInputChange","target","onChange","_","onSelectCity","renderInput","params","TextField","AppHeader","useSelector","state","forcastReducer","isFahrenheit","onCurrLocationSuccess","coords","latitude","longitude","to","icon","onClick","navigator","geolocation","getCurrentPosition","FavoritePreview","favorite","floorTemp","temp","src","WeatherIcon","WeatherText","Temperature","Imperial","Value","Metric","STORAGE_KEY","favoritesService","getFavorites","addFavorite","removeFavorite","fav","favId","loadFavorites","favorites","action","Favorites","favoritesReducer","favoritesCurrForcasts","currCity","useEffect","forcasts","HasPrecipitation","appColors","light","dark","DayPreview","day","dayInWeek","setDayInWeek","dateInWeek","setDateInWeek","date","Date","EpochDate","days","getDay","getDate","getMonth","fahrenheitToCelsius","Day","Icon","PrecipitationIntensity","PrecipitationType","toLowerCase","IconPhrase","Minimum","Maximum","Forcast","isFavorite","setIsFavorite","onCurrLocationFailed","onRemoveFavorite","favoriteToRemove","onAddFavorite","favoriteToAdd","now","getFullYear","todayDate","library","add","faMoon","faSun","faLocation","faHouse","faHeart","App","backgroundColor","component","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","filter","favoriteId","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d567cd5.chunk.js","sourcesContent":["export const storageService = {\r\n    query,\r\n    get,\r\n    post,\r\n    postMany,\r\n    put,\r\n    remove,\r\n    _save\r\n}\r\n\r\nfunction query(entityType) {\r\n    var entities = JSON.parse(localStorage.getItem(entityType)) || []\r\n    return Promise.resolve(entities)\r\n}\r\n\r\n\r\nfunction get(entityType, entityId) {\r\n    return query(entityType)\r\n        .then(entities => entities.find(entity => entity._id === entityId))\r\n}\r\n\r\nfunction post(entityType, newEntity) {\r\n    newEntity._id = _makeId()\r\n    return query(entityType)\r\n        .then(entities => {\r\n            entities.push(newEntity)\r\n            _save(entityType, entities)\r\n            return newEntity\r\n        })\r\n}\r\n\r\nfunction postMany(entityType, newEntities) {\r\n    return query(entityType)\r\n        .then(entities => {\r\n            newEntities = newEntities.map(entity => ({ ...entity, _id: _makeId() }))\r\n            entities.push(...newEntities)\r\n            _save(entityType, entities)\r\n            return entities\r\n        })\r\n}\r\n\r\n\r\n\r\nfunction put(entityType, updatedEntity) {\r\n    return query(entityType)\r\n        .then(entities => {\r\n            const idx = entities.findIndex(entity => entity._id === updatedEntity._id)\r\n            entities.splice(idx, 1, updatedEntity)\r\n            _save(entityType, entities)\r\n            return updatedEntity\r\n        })\r\n}\r\n\r\nfunction remove(entityType, entityId) {\r\n    return query(entityType)\r\n        .then(entities => {\r\n            const idx = entities.findIndex(entity => entity._id === entityId)\r\n            entities.splice(idx, 1)\r\n            _save(entityType, entities)\r\n        })\r\n}\r\n\r\n\r\nfunction _save(entityType, entities) {\r\n    localStorage.setItem(entityType, JSON.stringify(entities))\r\n}\r\n\r\nfunction _makeId(length = 5) {\r\n    var text = ''\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\r\n    for (var i = 0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length))\r\n    }\r\n    return text\r\n}","import axios from \"axios\"\r\nimport { storageService } from \"./async-storage.service\"\r\n\r\nconst API_KEY = '\tXbcijy9vu8XqmafY2DFOWdh2dfjUdRgK'\r\n\r\nexport const weatherForcatsService = {\r\n    getCitiesAutoComplete,\r\n    getForcast,\r\n    getCurrentForcast,\r\n    getEmptyCity,\r\n    getCurrentForcasts,\r\n    getCityByGeoloc\r\n}\r\n\r\nasync function getCitiesAutoComplete(city = 'Tel Aviv') {\r\n    try {\r\n        const storage = await storageService.query(`citiesResults_${city}`)\r\n        if (storage?.length) return storage;\r\n        console.log('getLocation api!');\r\n        const cities = await axios.get(`https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${city}`)\r\n        if (!cities.data?.length) storageService.postMany(`citiesResults_${city}`, cities.data)\r\n        return cities.data;\r\n    } catch (err) {\r\n        console.log('Error in getCitiesAutoComplete:', err)\r\n    }\r\n}\r\n\r\nasync function getForcast(loc = '215854') {\r\n    try {\r\n        const storage = await storageService.query(`forcastResults_${loc}`)\r\n        if (storage?.length) return storage;\r\n        console.log('getForcast api!');\r\n        const forcast = await axios.get(`http://dataservice.accuweather.com/forecasts/v1/daily/5day/${loc}?apikey=${API_KEY}`)\r\n        storageService.postMany(`forcastResults_${loc}`, [...forcast.data.DailyForecasts])\r\n        return forcast.data.DailyForecasts;\r\n    } catch (err) {\r\n        console.log('Error in getForcast:', err)\r\n    }\r\n}\r\n\r\nasync function getCurrentForcast(loc = '215854') {\r\n    try {\r\n        const storage = await storageService.query(`currentForcastResults_${loc}`)\r\n        if (storage?.length) return storage[0];\r\n        console.log('getCurrentForcast api!');\r\n        const forcast = await axios.get(`http://dataservice.accuweather.com/currentconditions/v1/${loc}?apikey=${API_KEY}`)\r\n        storageService.post(`currentForcastResults_${loc}`, forcast.data[0])\r\n        return forcast.data[0];\r\n    } catch (err) {\r\n        console.log('Error in getForcast:', err)\r\n    }\r\n}\r\n\r\nasync function getCityByGeoloc(lat, lng) {\r\n    try {\r\n        const storage = await storageService.query(`geoLocationResults_${lat}_${lng}`)\r\n        if (storage?.length) return { label: storage[0].AdministrativeArea.LocalizedName, id: storage[0].Key };\r\n        console.log('getCityByGeoloc api!');\r\n        const res = await axios.get(`https://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=${API_KEY}&q=${lat}%2C${lng}&toplevel=false`)\r\n        storageService.post(`geoLocationResults_${lat}_${lng}`, res.data)\r\n        return { label: res.data.AdministrativeArea.LocalizedName, id: res.data.Key };\r\n    } catch (err) {\r\n        console.log('Error in getCityByGeoloc:', err)\r\n    }\r\n}\r\n\r\nasync function getCurrentForcasts(cities) {\r\n    try {\r\n        const citiesPromise = await cities.map(async (c) => c.currForcast = await getCurrentForcast(c.locId))\r\n        return Promise.all(citiesPromise)\r\n    } catch (err) {\r\n        console.log('Error in getCurrentForcasts:', err)\r\n    }\r\n}\r\n\r\nfunction getEmptyCity() {\r\n    return {\r\n        cityName: '',\r\n        locId: '',\r\n    }\r\n}","import { weatherForcatsService } from \"../../service/weatherForcast.service\"\r\n\r\nexport function loadLocation(city) {\r\n  return async dispatch => {\r\n    const location = await weatherForcatsService.getCitiesAutoComplete(city)\r\n    const action = { type: 'SET_LOCATION', location }\r\n    await dispatch(action)\r\n  }\r\n}\r\nexport function loadForcast(loc) {\r\n  return async dispatch => {\r\n    const forcast = await weatherForcatsService.getForcast(loc?.id)\r\n    const currForcast = await weatherForcatsService.getCurrentForcast(loc?.id)\r\n    const details = loc ? loc : { label: 'Tel Aviv', id: '215854' }\r\n    await dispatch({ type: 'SET_DETAILS', details })\r\n    await dispatch({ type: 'SET_FORCAST', forcast, currForcast })\r\n  }\r\n}\r\nexport function loadCurrForcasts(cities) {\r\n  return async dispatch => {\r\n    const forcasts = await weatherForcatsService.getCurrentForcasts(cities)\r\n    await dispatch({ type: 'SET_FAVORITES_CURR_FORCASTS', forcasts })\r\n  }\r\n}\r\nexport function toggleDarkMode() {\r\n  return async dispatch => {\r\n    await dispatch({ type: 'TOGGLE_DARK_MODE' })\r\n  }\r\n}\r\nexport function toggleFahrenheit() {\r\n  return async dispatch => {\r\n    await dispatch({ type: 'TOGGLE_FAHRENHEIT' })\r\n  }\r\n}","import { Autocomplete, TextField } from '@mui/material';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\nimport { weatherForcatsService } from '../../service/weatherForcast.service';\nimport { loadForcast } from '../../store/actions/forcastActions';\nimport './Search.scss'\n\nexport function Search({ isDarkMode }) {\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const [citiesNames, setCitiesNames] = useState([])\n    const [isError, setIsError] = useState(false)\n\n    const searchCities = async (searchTerm) => {\n        if (!searchTerm || !checkLetters(searchTerm)) return\n        const citiesNames = []\n        const citiesNamesCheck = []\n        setIsError(null)\n        const citiesApi = await weatherForcatsService.getCitiesAutoComplete(searchTerm)\n        if (!citiesApi?.length) return\n        citiesApi.forEach((c) => {\n            citiesNames.forEach((obj) => {\n                citiesNamesCheck.push(obj.label)\n            })\n            if (!citiesNamesCheck.includes(c.LocalizedName)) citiesNames.push({ label: c.LocalizedName, id: c.Key })\n        })\n        setCitiesNames(citiesNames)\n    }\n\n    const checkLetters = (value) => {\n        const isEnglish = /^[A-Za-z\\s]+$/.test(value);\n        if (isEnglish || value === '') return true;\n        setIsError('English only!')\n        return false\n    }\n\n    const onSelectCity = (data) => {\n        dispatch(loadForcast(data))\n        history.push('/')\n    }\n\n    return (\n        <section className='search-container'>\n            <div style={{ maxHeight: isError ? '100%' : 0, maxWidth: isError ? '100%' : 0 }}><h3>English only!</h3></div>\n            <Autocomplete\n                inputMode='text'\n                disablePortal\n                id=\"combo-box-demo\"\n                options={citiesNames}\n                style={{ color: 'black' }}\n                sx={{ width: '100%', bgcolor: isDarkMode ? 'rgba(255, 255, 255, 0.9)' : 'rgba(0, 0, 0, 0.07)', '& input': { color: 'black' } }}\n                onInputChange={(data) => searchCities(data.target.value)}\n                onChange={(_, data) => data?.id ? onSelectCity(data) : null}\n                renderInput={(params) => <TextField {...params} label=\"Search cities\" />}\n            />\n        </section>\n    )\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { weatherForcatsService } from '../../service/weatherForcast.service'\nimport { loadForcast, toggleDarkMode, toggleFahrenheit } from '../../store/actions/forcastActions'\nimport { Search } from '../Search/Search'\nimport './AppHeader.scss'\n\nexport function AppHeader() {\n    const dispatch = useDispatch()\n    const isDarkMode = useSelector(state => state.forcastReducer.isDarkMode)\n    const isFahrenheit = useSelector(state => state.forcastReducer.isFahrenheit)\n\n    const loadCurrLocation = () => navigator.geolocation.getCurrentPosition(onCurrLocationSuccess)\n\n    const onCurrLocationSuccess = async (res) => {\n        const loc = await weatherForcatsService.getCityByGeoloc(res.coords.latitude, res.coords.longitude)\n        dispatch(loadForcast(loc))\n    }\n    return (\n        <section className='app-header-container'>\n            <h2>Weather Forcast</h2>\n            <Link className='link nav-item' to={'/'}><div><FontAwesomeIcon icon=\"house\" /> <h2>Home</h2></div></Link>\n            <Link className='link nav-item' to={'/favorites'}><div><FontAwesomeIcon icon=\"heart\" /> <h2>Favorites</h2></div></Link>\n            <div className='options-container'>\n                <button onClick={() => dispatch(toggleFahrenheit())}>{isFahrenheit ? \"F°\" : \"C°\"}</button>\n                <button onClick={loadCurrLocation}><FontAwesomeIcon icon=\"location\" /></button>\n                <button onClick={() => dispatch(toggleDarkMode())}><FontAwesomeIcon icon={isDarkMode ? \"sun\" : \"moon\"} /></button>\n            </div>\n            <Search isDarkMode={isDarkMode} />\n        </section>\n    )\n}","import { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport { loadForcast } from '../../store/actions/forcastActions'\n\nimport './FavoritePreview.scss'\n\nexport function FavoritePreview({ favorite, currForcast }) {\n    const dispatch = useDispatch()\n    const isFahrenheit = useSelector(state => state.forcastReducer.isFahrenheit)\n    const history = useHistory()\n\n    const floorTemp = (temp) => Math.floor(temp)\n\n    const sendToforcast = () => {\n        dispatch(loadForcast({ label: favorite.cityName, id: favorite.locId }))\n        history.push('/')\n    }\n\n    if (!currForcast) return (<div><h2>Loading...</h2></div>)\n\n    return (\n        <li className='favorite-preview' onClick={sendToforcast}>\n            <p>{favorite.cityName}</p>\n            <img src={`https://developer.accuweather.com/sites/default/files/${currForcast.WeatherIcon < 10 ? `0${currForcast.WeatherIcon}` : currForcast.WeatherIcon}-s.png`} />\n            <p>{currForcast.WeatherText}</p>\n            {isFahrenheit && <p>{floorTemp(currForcast.Temperature.Imperial.Value)}° F</p>}\n            {!isFahrenheit && <p>{floorTemp(currForcast.Temperature.Metric.Value)}° C</p>}\n        </li>\n    )\n}","import { storageService } from \"./async-storage.service\"\r\n\r\nconst STORAGE_KEY = 'favorites'\r\n\r\nexport const favoritesService = {\r\n    getFavorites,\r\n    addFavorite,\r\n    removeFavorite\r\n}\r\n\r\nasync function getFavorites() {\r\n    try {\r\n        return await storageService.query(STORAGE_KEY)\r\n    } catch (err) {\r\n        console.log('Error in getFavorites:', err)\r\n    }\r\n}\r\n\r\nasync function addFavorite(fav) {\r\n    try {\r\n        return await storageService.post(STORAGE_KEY, fav)\r\n    } catch (err) {\r\n        console.log('Error in getFavorites:', err)\r\n    }\r\n}\r\n\r\nasync function removeFavorite(favId) {\r\n    try {\r\n        return await storageService.remove(STORAGE_KEY, favId)\r\n    } catch (err) {\r\n        console.log('Error in getFavorites:', err)\r\n    }\r\n}","import { favoritesService } from \"../../service/favorites.service\"\r\n\r\nexport function loadFavorites() {\r\n    return async dispatch => {\r\n        const favorites = await favoritesService.getFavorites()\r\n        const action = { type: 'SET_FAVORITES', favorites }\r\n        await dispatch(action)\r\n    }\r\n}\r\nexport function addFavorite(fav) {\r\n    return async dispatch => {\r\n        const favorite = await favoritesService.addFavorite(fav)\r\n        const action = { type: 'ADD_FAVORITE', favorite }\r\n        await dispatch(action)\r\n    }\r\n}\r\nexport function removeFavorite(favId) {\r\n    return async dispatch => {\r\n        await favoritesService.removeFavorite(favId)\r\n        const action = { type: 'REMOVE_FAVORITE', favId }\r\n        await dispatch(action)\r\n    }\r\n}","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { FavoritePreview } from '../../cmps/FavoritePreview/FavoritePreview'\nimport { loadFavorites } from '../../store/actions/favoritesActions'\nimport { loadCurrForcasts } from '../../store/actions/forcastActions'\n\nimport './Favorites.scss'\n\nexport function Favorites() {\n    const dispatch = useDispatch()\n    const favorites = useSelector(state => state.favoritesReducer.favorites)\n    const favoritesCurrForcasts = useSelector(state => state.favoritesReducer.favoritesCurrForcasts)\n    const currCity = useSelector(state => state.forcastReducer.currCity)\n\n    useEffect(() => {\n        dispatch(loadFavorites())\n    }, [])\n\n    useEffect(() => {\n        if (favorites?.length) dispatch(loadCurrForcasts(favorites))\n    }, [favorites])\n\n    if (!favorites || !favoritesCurrForcasts?.length) return (<div><h2>!favoritesCurrForcasts.length</h2></div>)\n\n    return (\n        <>\n            {!!favorites.length && <section className={`favorites-container ${currCity.currForcast.HasPrecipitation ? 'rain-bgi' : 'sunny-bgi'}`}>\n                <h2>Your favorites</h2>\n                <ul className='favorites-list hide-overflow'>\n                    {favorites.map((fav, idx) => <FavoritePreview currForcast={favoritesCurrForcasts[idx]} favorite={fav} key={idx} />)}\n                </ul>\n            </section>}\n            {!favorites.length && <span>You Have No Favorite Cities Yet</span>}\n        </>\n    )\n}\n","export const appColors = {\r\n    primary: {\r\n        light: 'white',\r\n        dark: '#2e2e2e'\r\n    },\r\n    secondary: {\r\n        light: '',\r\n        dark: ''\r\n    },\r\n}","import { useEffect, useState } from 'react';\nimport './DayPreview.scss'\n\nexport function DayPreview({ day, isFahrenheit }) {\n    const [dayInWeek, setDayInWeek] = useState('')\n    const [dateInWeek, setDateInWeek] = useState('')\n\n    useEffect(() => {\n        const date = new Date(day.EpochDate * 1000)\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        setDayInWeek(days[(date.getDay() + 1) >= days.length ? 0 : (date.getDay() + 1)])\n        setDateInWeek(`${date.getDate() + 1}/${date.getMonth() + 1}`)\n    }, [])\n\n    const fahrenheitToCelsius = (temp) => isFahrenheit ? Math.floor(temp) : Math.floor((temp - 32) * 5 / 9)\n\n    return (\n        <div className='day-preview'>\n            <h3>{dayInWeek} {dateInWeek}</h3>\n            <img src={`https://developer.accuweather.com/sites/default/files/${day.Day.Icon < 10 ? `0${day.Day.Icon}` : day.Day.Icon}-s.png`} />\n            {day.Day.HasPrecipitation && <p>{day.Day.PrecipitationIntensity} {day.Day.PrecipitationType.toLowerCase()}</p>}\n            {!day.Day.HasPrecipitation && <p>{day.Day.IconPhrase}</p>}\n            <h3>{fahrenheitToCelsius(day.Temperature.Minimum.Value)}° {isFahrenheit ? 'F' : 'C'} - {fahrenheitToCelsius(day.Temperature.Maximum.Value)}° {isFahrenheit ? 'F' : 'C'}</h3>\n        </div>\n    )\n}\n","import FavoriteIcon from '@mui/icons-material/Favorite';\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addFavorite, removeFavorite } from '../../store/actions/favoritesActions';\nimport { weatherForcatsService } from '../../service/weatherForcast.service';\nimport { useEffect, useState } from 'react';\nimport { loadForcast } from '../../store/actions/forcastActions';\nimport { DayPreview } from '../../cmps/DayPreview/DayPreview';\n\nimport './Forcast.scss'\n\nexport function Forcast() {\n    const dispatch = useDispatch()\n    const isFahrenheit = useSelector(state => state.forcastReducer.isFahrenheit)\n    const currCity = useSelector(state => state.forcastReducer.currCity)\n    const favorites = useSelector(state => state.favoritesReducer.favorites)\n    const { forcast, currForcast, cityName } = currCity\n\n    const [isFavorite, setIsFavorite] = useState(false)\n\n    useEffect(() => {\n        if (!currCity.cityName) navigator.geolocation.getCurrentPosition(onCurrLocationSuccess, onCurrLocationFailed)\n        const isFavorite = favorites.find((fav) => fav.locId === currCity.locId)\n        isFavorite ? setIsFavorite(true) : setIsFavorite(false)\n    }, [currCity])\n\n    const onCurrLocationSuccess = async (res) => {\n        const loc = await weatherForcatsService.getCityByGeoloc(res.coords.latitude, res.coords.longitude)\n        dispatch(loadForcast(loc))\n    }\n\n    const onCurrLocationFailed = () => dispatch(loadForcast())\n\n    const floorTemp = (temp) => Math.floor(temp)\n\n    const onRemoveFavorite = async () => {\n        const favoriteToRemove = favorites.find((fav) => fav.locId === currCity.locId)\n        dispatch(removeFavorite(favoriteToRemove._id))\n        setIsFavorite(false)\n    }\n\n    const onAddFavorite = async () => {\n        const favoriteToAdd = weatherForcatsService.getEmptyCity()\n        favoriteToAdd.cityName = currCity.cityName\n        favoriteToAdd.locId = currCity.locId\n        dispatch(addFavorite(favoriteToAdd))\n        setIsFavorite(true)\n    }\n\n    const todayDate = () => {\n        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n        const date = new Date(Date.now())\n        return `${months[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`\n    }\n\n    if (!currCity?.currForcast) return (<div><h2>Loading Forcast...</h2></div>)\n\n    return (\n        <section className={`forcast-container ${currCity.currForcast.HasPrecipitation ? 'rain-bgi' : 'sunny-bgi'}`}>\n            <div className='forcast-header'>\n                <div>\n                    <div>\n                        <h1>{cityName}</h1>\n                        {isFavorite && <button onClick={() => onRemoveFavorite()}><FavoriteIcon sx={{ color: 'red' }} /></button>}\n                        {!isFavorite && <button onClick={() => onAddFavorite()}><FavoriteBorderIcon /></button>}\n                    </div>\n                    <p>{todayDate()}</p>\n                    <div>\n                        <img src={`https://developer.accuweather.com/sites/default/files/${currForcast.WeatherIcon < 10 ? `0${currForcast.WeatherIcon}` : currForcast.WeatherIcon}-s.png`} />\n                        <h3>{currForcast.WeatherText === \"Rain\" ? currForcast.WeatherText + 'ing' : currForcast.WeatherText}</h3>\n                    </div>\n                </div>\n                <div>\n                    {isFahrenheit && <p>{floorTemp(currForcast.Temperature.Imperial.Value)}°</p>}\n                    {!isFahrenheit && <p>{floorTemp(currForcast.Temperature.Metric.Value)}°</p>}\n                </div>\n            </div>\n            <div className='days-list hide-overflow'>\n                <div>\n                    {forcast.map((day, idx) => <DayPreview isFahrenheit={isFahrenheit} key={idx} day={day} />)}\n                </div>\n            </div>\n        </section>\n    )\n}","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport { AppHeader } from './cmps/AppHeader/AppHeader';\nimport { Favorites } from './pages/Favorites/Favorites';\nimport { loadFavorites } from './store/actions/favoritesActions';\nimport { appColors } from './assets/appColors';\nimport { Forcast } from './pages/Forcast/Forcast';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faMoon, faSun, faLocation, faHouse, faHeart } from '@fortawesome/free-solid-svg-icons'\n\nimport './App.scss';\n\nlibrary.add(faMoon, faSun, faLocation, faHouse, faHeart)\n\nfunction App() {\n  const dispatch = useDispatch()\n  const isDarkMode = useSelector(state => state.forcastReducer.isDarkMode)\n\n  useEffect(() => {\n    dispatch(loadFavorites())\n  }, [])\n\n  return (\n    <Router>\n      <div className={`App  ${!isDarkMode ? 'dark-container' : 'light-container'}`} style={{ backgroundColor: isDarkMode ? appColors.primary.dark : appColors.primary.light }}>\n        <AppHeader />\n        <Switch>\n          <Route component={Favorites} path='/favorites' />\n          <Route component={Forcast} path='/' />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const INITIAL_STATE = {\r\n  currCity: {\r\n    cityName: null,\r\n    locId: null,\r\n    forcast: null,\r\n    currForcast: null\r\n  },\r\n  isDarkMode: false,\r\n  isFahrenheit: false\r\n}\r\n\r\nexport function forcastReducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case 'SET_DETAILS':\r\n      return {\r\n        ...state,\r\n        currCity: {\r\n          ...state.currCity,\r\n          cityName: action.details.label,\r\n          locId: action.details.id\r\n        },\r\n      }\r\n    case 'SET_FORCAST':\r\n      return {\r\n        ...state,\r\n        currCity: {\r\n          ...state.currCity,\r\n          forcast: action.forcast,\r\n          currForcast: action.currForcast\r\n        },\r\n      }\r\n    case 'SET_CURR_FORCAST':\r\n      return {\r\n        ...state,\r\n        currCity: {\r\n          ...state.currCity,\r\n          currForcast: action.currForcast\r\n        },\r\n      }\r\n    case 'TOGGLE_DARK_MODE':\r\n      return {\r\n        ...state,\r\n        isDarkMode: !state.isDarkMode\r\n      }\r\n    case 'TOGGLE_FAHRENHEIT':\r\n      return {\r\n        ...state,\r\n        isFahrenheit: !state.isFahrenheit\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","const INITIAL_STATE = {\r\n    favorites: [],\r\n    favoritesCurrForcasts: []\r\n}\r\n\r\nexport function favoritesReducer(state = INITIAL_STATE, action) {\r\n    switch (action.type) {\r\n        case 'SET_FAVORITES':\r\n            return {\r\n                ...state,\r\n                favorites: action.favorites\r\n            }\r\n        case 'SET_FAVORITES_CURR_FORCASTS':\r\n            return {\r\n                ...state,\r\n                favoritesCurrForcasts: action.forcasts\r\n            }\r\n        case 'ADD_FAVORITE':\r\n            return {\r\n                ...state,\r\n                favorites: [...state.favorites, action.favorite]\r\n            }\r\n        case 'REMOVE_FAVORITE':\r\n            return {\r\n                ...state,\r\n                favorites: state.favorites.filter(favorite => favorite._id !== action.favoriteId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport { forcastReducer } from './reducers/forcastReducer'\r\nimport { favoritesReducer } from './reducers/favoritesReducer'\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst rootReducer = combineReducers({\r\n    forcastReducer,\r\n    favoritesReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();"],"sourceRoot":""}